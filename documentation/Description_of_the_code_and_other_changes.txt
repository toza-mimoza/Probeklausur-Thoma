Since I am not familiar with LateX, I'll write it here: 

1. Title of the Documentation: You left out a 'c' in 'Scientific'
1.1. Just a suggestion for the order: 
		-1. Form.h
		-2. Box.h
		-3. Box.cpp
		-4. Rectangle.h
		-5. Rectangle.cpp
		-6. Circle.h 
		-7. Circle.cpp
		-8. main.cpp
2. Exercise 4: Header for Form class
-> (line 16)remove the comment
-> Description: 
	This header file declares a class 'Form', which is the base class for classes 'Circle' and 'Rectangle'. The private members of this class are two double variables 'xCenter' and 'yCenter', which store coordinates for the center of the form.
	The protected member is a Box type object called 'box'. Because of this, every class that derives from 'Form' class has its own 'box' member and it cannot be accessed directly outside of this class. 
	As public members we have a default constructor called 'Form()', a 'move' method that changes the coordinates of the form depending on the passed parameters 'dX' and 'dY', and a method called 'getBoxRef()' that returns a reference to the 'Box' type object in this class.


4. Exercise 4: Circle cpp file
-> change the name from setUpBox to initBox
-> completely remove lines 4,5,6,7
-> Description:
	The first overloaded constructor 'Circle()' just initializes the 'radius' variable with zero. 
	The second overloaded constructor 'Circle(double rad)' initializes the 'radius' variable with the value of the parameter 'rad'. 
	Method 'initBox' of the Circle class initializes the values of the 'box' object of the 'Circle' class. 
	The overloaded method 'move' calls the 'move' function of its base class 'Form' and the private method 'moveBox' that changes the values of the bounding box. This makes the bbox follow the circle.
	
5. Exercise 4: Header for Rectangle class
-> change the name from setUpBox to initBox
-> (line 13)remove the comment
-> Description:
	Before declaring the 'Rectangle' class we must first include the base class 'Form' (see the line number 4). Then, on the line 6 we start declaring the 'Rectangle' class that derives from 'Form'.
	The private methods are two double type variables 'width' and 'height' of a rectangle. In the private section we also have a function called 'moveBox' that changes the position of the bounding box for this rectangle. Since we don't need this function outside of class, we placed this function in the private section of this class. 
	The public methods are an overloaded default constructor, a second overloaded constructor that initializes the private variables 'width' and 'height', an overloaded method called 'move' (overloads the 'move' method in the Form class), and a method 'initBox' that initializes the 'Box' type object for this class. 
	
6. Exercise 4: Rectangle cpp file
-> change the name from setUpBox to initBox
-> completely remove lines 4,5,6,7  
-> Description: 
	The first overloaded constructor 'Rectangle()' zero-initializes the width and height of the rectangle and all variables of the 'Box' type object. The second constructor 'Rectangle(double h, double w)' takes the parameters and initializes the variables 'height' and 'width'.
	The method 'initBox' takes into account that the bounding box for the rectangle is different from any other form and it initializes the variables 'xMin', 'xMax', 'yMin' and 'yMax' of the 'box' object in this class. 
	The overloaded method 'move' calls the 'move' function of the 'Form' class and changes the position of the rectangle according to the two parameters 'dX' and 'dY'. This method also calls the private 'moveBox' method to update the values of the 'box' object. This makes the bounding box follow the rectangle and it updates the bounding box automatically. 
7. Exercise 4: Header for Circle class

-> Description: 
	Before declaring the 'Circle' class we must first include the base class 'Form' (see the line number 4).
	This header file declares a 'Circle' class, derived from the 'Form' class. 
	In the private section we have a double variable 'radius' and a function 'moveBox'. Variable 'radius' stores the radius of the circle and the function 'moveBox' changes the position of the bounding box for this form.	
	The public methods are two overloaded constructors 'Circle()' and 'Circle(double rad)', a 'move' method that changes the position of the circle, and a method 'initBox' that initializes the bounding box. 
	
8. Exercise 4: main.cpp
-> in the method circleCreator and rectCreator change from ->setUpBox() to ->initBox()
-> Description: 
	Now, in the main function we implement all these functions. First, we included the 'iostream' directory (line 1) and the 'string' directory from the standard library (line 2). 
	We also need the 'Circle' and 'Rectangle' class so we included it (lines 3 and 4). To make our lives more convenient we used the using-directive for the 'std' namespace (line 6). 
	On the lines 9, 12, 15, 18 and 19 we declare prototype functions that all have a different purpose. These are discussed briefly bellow.  
	On the line 21 we start with the 'main' function. First, we declare two double type variables 'movX' and 'movY' that will be initialized depending on the user input and, later, used as arguments for the 'move' function of each form. 
	The declared string 'prompt' on the line 26 is used for deciding which form to create (either a circle or a rectangle). 
	Lines 30 and 31 declare and initialize with NULL a circle and a rectangle object.
	Depending on the user input (either 'circle' or 'rectangle') only one form of these two types will be initialized (i.e. 'circle1/2' or 'rect1/2') 
	The creation is implemented in the 'circleCreator' and 'rectCreator' functions. The values of the bounding box are also displayed through the use of the 'print' method of the 'Box' class.
	The user will be also asked to move the form in the X and Y direction. The input is stored in the 'movX' and 'movY' variables respectively and then passed to the 'move' function. 
	After calling the 'move' function, the 'print' method of the 'Box' class is used again to display the variables of the bounding box for this form.
	The whole process repeats for the second form. 
	Then, on the line 93, we declare a new 'Box' type object called 'boundingBox'. This object is used to add the bboxes of the created forms. This is achieved through the use of 'addBoxes' function, a function that finds suitable values for the new, larger bounding box. Keep in mind that if the bounding boxes of the two created forms don't collide, then we don't need to find a new bounding box since they should stay separated from each other.
	On the line 103 we deallocate the memory used by 'Circle' and 'Rectangle' objects.

9. Exercise 4: Header for Box class
-> Description:
	The 'Box' class is the representation of the bounding for each form. It is included as an object in 'Form', 'Circle' and 'Rectangle' classes.
	The private members of this class are variables 'xMin', 'xMax', 'yMin' and 'yMax'. 
	The public members are typical getter und setter conventional methods for this class, also an overloaded constructor 'Box()' that zero-initializes the private members, a 'print' method to display the bounding box values for this class, and an overloaded '+' operator declared as a friend function. It is important to declare the overloaded operator as a friend function because we want to directly access private data members. 
	Also, this overloaded operator's purpose is to create a new bounding box only if the two 'Box' type objects passed as arguments. 
	
10. Exercise 4: Box. cpp
-> Description: 
	Here are all methods from the header file implemented.
	The overloaded operator '+' checks if the bounding boxes collide and if so, displays a message to the user. 
	